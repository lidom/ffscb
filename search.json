[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Dominik Liebl. Author, maintainer. Matthew Reimherr. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Liebl, D. & Reimherr, M. (2022+). Fast fair simultaneous confidence bands functional parameters. arXiv preprint arXiv:1910.00131.","code":"@Article{,   title = {Fast and fair simultaneous confidence bands for functional parameters},   author = {Dominik Liebl and Matthew Reimherr},   journal = {arXiv preprint arXiv:1910.00131},   year = {2022{+}},   pages = {1-57},   url = {https://arxiv.org/abs/1910.00131}, }"},{"path":[]},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Fast n Fair Simultaneous Confidence Bands for Functional Parameters","text":"R package ffscb allows compute simultaneous confidence bands function-valued parameters (e.g. mean functions μ = {μ(t) : t ∈ [0,1]}). band shapes constructed fairness constraint false positive rate balance allows distribute total false positive rate α ∈ (0,1) partitions 0 = a0 < a1 < … < ap = 1 function domain [0,1].1 leads band shapes interpretable globally locally. Globally (.e. total domain [0,1]) simultaneous confidence band provides (1−α) × 100% coverage probability. Locally (.e. sub-intervals [aj − 1,aj] ⊆ [0,1]) simultaneous confidence band provides (1−α(aj−aj − 1)) × 100% coverage probability. statistical theory methodology described : Fast ‘n’ fair simultaneous confidence bands functional parameters introduced paper Fast Fair Simultaneous Confidence Bands Functional Parameters (arXiv:1910.00131) Dominik Liebl Matthew Reimherr. R-codes R package ffscb can found GitHub repo https://github.com/lidom/ffscb","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fast n Fair Simultaneous Confidence Bands for Functional Parameters","text":"","code":"devtools::install_github(\"lidom/ffscb\")"},{"path":"/index.html","id":"small-example-based-on-artifical-data","dir":"","previous_headings":"","what":"Small example based on artifical data","title":"Fast n Fair Simultaneous Confidence Bands for Functional Parameters","text":"Legend band-type:","code":"library(\"ffscb\") # Generate a sample p          <- 200  N          <- 80  grid       <- make_grid(p, rangevals=c(0,1)) mu         <- meanf_poly(grid,c(0,.25))  names(mu)  <- grid cov.m      <- make_cov_m(cov.f = covf_nonst_matern, grid=grid, cov.f.params=c(2, 1/4, 1/4)) sample     <- make_sample(mu,cov.m,N)  # Compute the estimate, hat.mu, and its covariance, hat.cov.mu hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N # Compute the tau-parameter  # I.e., the 'roughness parameter function needed for the FFSCB-bands hat.tau    <- tau_fun(sample)  # Make and plot confidence bands b <- confidence_band(x          = hat.mu,                       cov.x      = hat.cov.mu,                       tau        = hat.tau,                       df         = N-1,                      type       = c(\"FFSCB.t\", \"Bs\", \"BEc\", \"naive.t\"),                      conf.level = 0.95,                       n_int      = 4) plot(b)"},{"path":"/index.html","id":"example-using-real-functional-data","dir":"","previous_headings":"","what":"Example using real functional data","title":"Fast n Fair Simultaneous Confidence Bands for Functional Parameters","text":"following code replicates sports biomechanics real data example paper Liebl Reimherr (2022+). First, read plot data.  Next, need compute estimate mean function hat.mu estimate covariance function hat.cov.mu. latter, can compute estimate roughness parameter hat.tau. Now, everything place compute fair simultaneous 95% confidence band balances false positive rate α = 0.05 allocating equal shares α(1/n_int) n_int=8 sub-intervalls [0,12.5%], [12.5%,25], …, [87.5%,100%]. Note: paper treats also case balanced false positive rates arbitrary partitions domain, feature yet implemented package. quick dirty plot can generated plot(b). following code, however, replicates plot paper Liebl Reimherr (2022+):","code":"library(\"ffscb\") data(\"Biomechanics\") ## Data slct_EC      <- grepl(pattern = \"Extra_Cush_\",  x = colnames(Biomechanics)) slct_NC      <- grepl(pattern = \"Normal_Cush_\", x = colnames(Biomechanics)) ## grid         <- Biomechanics[,1]/100   # Grid in [0,1]   EC_mat       <- Biomechanics[,slct_EC] # Torque curves when running with extra  cushioned running shoes NC_mat       <- Biomechanics[,slct_NC] # Torque curves when running with normal cushioned running shoes Dff_mat      <- EC_mat - NC_mat        # Difference curves N            <- ncol(Dff_mat)          # Sample size  ## Plot width     <- 7 height    <- 2.5 mar       <- c(4.1, 4.1, 4.1, 1.1) ## layout(mat = matrix(c(1:3), nrow=1, ncol=3), widths = c(1, 1, 1))   ## par(family = \"serif\", ps=13, cex.main=1.3, cex.lab=1.25, cex.axis=1.3, font.main = 1, mar=mar) matplot(y = EC_mat,  x = grid*100, lwd=.5, col=gray(.25), type=\"l\", lty=1,          ylab=\"N m / kg\", xlab = \"% of Stance Phase\", main=\"Extra Cushioned\\nRunning Shoe\") matplot(y = NC_mat,  x = grid*100, lwd=.5, col=gray(.25), type=\"l\", lty=1,          ylab=\"N m / kg\", xlab = \"% of Stance Phase\", main=\"Normal Cushioned\\nRunning Shoe\") matplot(y = Dff_mat, x = grid*100, lwd=.5, col=gray(.5), type=\"l\", lty=1, ylim = c(-0.25, max(Dff_mat)),          ylab=\"N m / kg\", xlab = \"% of Stance Phase\", main=\"Difference Curves\\n(Extra - Normal)\") lines(y = rowMeans(Dff_mat), x = grid*100) legend(\"bottomright\", legend = expression(paste(\"Estimated mean\")), col=\"black\", lty=1, bty=\"n\", lwd = 1.5, cex=1.3) ## Computing the estimates hat_mu       <- rowMeans(Dff_mat) hat.cov      <- crossprod(t(Dff_mat - hat_mu)) / (N-1) hat.cov.mu   <- hat.cov / N hat.tau      <- tau_fun(Dff_mat) alpha.level  <- 0.05 n_int        <- 8  ## Over each subinterval [0, 12.5%], [12.5%, 25%], ... , [87.5%, 100%]   ## we compute a 99.375% simultanouse confidence interval: (1 - alpha.level*(1/n_int)) * 100  #> [1] 99.375  ## Computing the confidence bands b                 <- confidence_band(x          = hat_mu,                                       cov        = hat.cov.mu,                                       tau        = hat.tau,                                       df         = N-1,                                       type       =\"FFSCB.t\",                                       conf.level = 1-alpha.level,                                       n_int      = n_int) FF8_t_band        <- b[,-1]  FF8_crit_value_u  <- (FF8_t_band[,1] - hat_mu)/sqrt(diag(hat.cov.mu))  ## Plots width     <- 7 height    <- 3.125 cex       <- .9 cexs      <- 0.95 ## layout(mat = matrix(c(1,2,3,3), nrow=2, ncol=2),        heights = c(1, 1),     # Heights of the two rows        widths =  c(1, 1.25))  # Widths of the two columns  par(family = \"serif\", ps=13, cex.axis=1.05, font.main = 1) par(mar=c(3.1, 2.1, 2, 1.1)) plot(y=hat.tau,x=grid*100, type=\"l\", main = \"\", xlab = \"\", ylab=\"\") mtext(text = expression(paste(\"Roughness estimate \",hat(tau))), 3, line = 0.4, adj = 0, cex=cex) ## par(mar=c(3.1, 2.1, 2, 1.1)) matplot(y=cbind(FF8_crit_value_u), x=grid*100, col=\"black\", lty=c(2,1), type = \"l\",          main=\"\", xlab = \"\", ylab=\"\", lwd=c(1.5,1), ylim=c(min(FF8_crit_value_u),4.1)) abline(v=c( 0:8 * 100/8), col=\"gray\", lwd=1.3) mtext(text = expression(paste(\"Fair adaptive critical value function \", hat(u)[alpha/2]^\"*\")), 3, line = 0.4, adj = 0, cex=cex) mtext(text = \"% of Stance Phase\", 1, line = 2.25, cex=cexs) ##  par(mar=c(3.1, 4.1, 3.1, 2.1)) matplot( y = b, x = grid*100, type=\"n\", ylim=c(min(FF8_t_band),0.28),           ylab=\"\", xlab = \"\", main=\"\") polygon(x=c(grid*100,rev(grid*100)), y=c(FF8_t_band[,2],rev(FF8_t_band[,1])), col = gray(.75), border = gray(.75)) abline(  h = 0, lwd=0.7) abline(v=c( 0:8 * 100/8), col=\"gray\") lines(   y = hat_mu,  x = grid*100, col=1, lty=1) axis(4, at = 0, labels = expression(H[0]:~theta==0)) legend(x=50, y=0.3, legend = c(expression(paste(\"Estimated mean\")),                                 expression(FF[t]^8)), y.intersp=1.05, bg=\"white\", box.col = \"white\",        lty=c(1,1), lwd = c(1.5,10), col=c(\"black\", gray(.75)), cex =cexs, seg.len=2) mtext(text = \"% of Stance Phase\", 1, line = 2.25, cex=cexs) mtext(text = \"N m / kg\", 2, line = 2.5, cex=cex) mtext(text = \"95% Simultaneous Confidence Band (SCB)\\n99.375% SCB over each subinterval\", 3, line = 0.4, cex=cex) text(x = 12.5/2, y = .2, labels=\"99.375% SCB\", srt=90) box()"},{"path":"/index.html","id":"example-using-real-fragmentary-functional-data","dir":"","previous_headings":"","what":"Example using real fragmentary functional data","title":"Fast n Fair Simultaneous Confidence Bands for Functional Parameters","text":"method even works case fragmentary functional data, impossible compute estimates total covariance function. following code replicates framentary functional data example paper Liebl Reimherr (2022+). First, read plot data.  Next, need compute estimates mean functions hat_mu_f hat_mu_m estimates covariance functions hat_cov_f hat_cov_f. Due fragmentary nature data, can estimate covariance functions band along diagonal covarianc functions.  Based hat_cov_f hat_cov_f, can compute covariance estimate hat_cov_mat two-sample mean difference hat_mu_f - hat_mu_m. Based hat_cov_mat, can compute roughness parameter hat.tau; even though, hat_cov_mat can computed along band around diagonal.  detailes real-ata application can found paper Liebl Reimherr (2022+).","code":"suppressPackageStartupMessages(library(\"tidyverse\")) library(\"ffscb\") data(Fragments)  slct_Y_f      <- grepl(pattern = \"Y_f.\",  x = colnames(Fragments)) slct_X_f      <- grepl(pattern = \"X_f.\",  x = colnames(Fragments)) ## slct_Y_m      <- grepl(pattern = \"Y_m.\",  x = colnames(Fragments)) slct_X_m      <- grepl(pattern = \"X_m.\",  x = colnames(Fragments)) ## Y_f_mat       <- as.matrix(Fragments[,slct_Y_f]) X_f_mat       <- as.matrix(Fragments[,slct_X_f]) ## Y_m_mat       <- as.matrix(Fragments[,slct_Y_m]) X_m_mat       <- as.matrix(Fragments[,slct_X_m])  grid <- seq(from = min(c(X_f_mat, X_m_mat), na.rm=TRUE),              to   = max(c(X_f_mat, X_m_mat), na.rm=TRUE),              len  = nrow(X_m_mat))  width     <- 7 height    <- 3.8 cex       <- 1 cexs      <- 0.95 mar       <- c(3.25, 2.1, 2.1, 2.1) ## par(mfrow=c(1,1), family = \"serif\", ps=13, cex.main=.99, font.main = 1, mar=mar) matplot(y=cbind(Y_f_mat, Y_m_mat),           x=cbind(X_f_mat, X_m_mat), type=\"n\", xlab=\"\", ylab=\"\", ylim=c(.45,max(cbind(Y_f_mat, Y_m_mat),na.rm=T))) matlines(y=Y_f_mat,  x=X_f_mat, lty=1, col=gray(.5)) matlines(y=rowMeans(Y_f_mat, na.rm = TRUE), x=grid,    lty=1, col=\"black\", lwd = 2) matlines(y=Y_m_mat,  x=X_m_mat, lty=2, col=gray(.5)) matlines(y=rowMeans(Y_m_mat, na.rm = TRUE), x=grid,    lty=2, col=\"black\", lwd = 2) legend(\"topleft\", legend = c(\"Female\", \"Male\"),         lty = c(1,2), col = c(gray(.5), gray(.5)), lwd=1.5, bty=\"n\", cex = cexs) legend(\"bottomright\", legend = c(\"Estimated mean (female)\",                                  \"Estimated mean (male)\"),         lty = c(1,2), col = c(\"black\", \"black\"), lwd=1.5, bty=\"n\", cex = cexs) mtext(text = \"Spinal BMD\", 3, line = 0.4, adj = 0, cex=cex) mtext(text = \"Age\", 1, line = 2.25, cex=cexs) hat_mu_f   <- rowMeans(Y_f_mat, na.rm = TRUE) # mean function estimate (female) hat_mu_m   <- rowMeans(Y_m_mat, na.rm = TRUE) # mean function estimate (male) ## hat_cov_f  <- cov_fragments(Y_f_mat) # covariance function estimate (female) hat_cov_m  <- cov_fragments(Y_m_mat) # covariance function estimate (male) ## width     <- 7.1 height    <- 3.7 par(mfrow=c(1,2), family = \"serif\", ps=13, cex.main=.99, font.main = 1, mar=c(4.1, 4.1, 2.1, 2.1)) image(hat_cov_f, col=gray(seq(0,1,len=32)), xlab = \"Age\", ylab = \"Age\"); box() mtext(text = \"Female\", 3, line = 0.4, adj = 0, cex=cex) image(hat_cov_m, col=gray(seq(0,1,len=32)), xlab = \"Age\", ylab = \"Age\"); box() mtext(text = \"Male\", 3, line = 0.4, adj = 0, cex=cex) N_f          <- ncol(X_f_mat) # Number of female subjects N_m          <- ncol(X_m_mat) # Number of male subjects ## # number of observations X_i(t)*X_i(s), i=1,...,N_f, for each (t,s) grid point n_f_ts       <- n_ts(Y_f_mat);  n_f <- diag(n_f_ts)  # number of observations X_i(t)*X_i(s), i=1,...,N_m, for each (t,s) grid point n_m_ts       <- n_ts(Y_m_mat);  n_m <- diag(n_m_ts)  ## hat_cov_mat  <- ( (n_f_ts - 1) * hat_cov_f + (n_m_ts - 1) * hat_cov_m ) / (n_f_ts + n_m_ts -2) diag_cov     <- diag(hat_cov_mat) diag_cov_x   <- diag_cov / (n_f + n_m) ## tau          <- cov2tau_fun(hat_cov_mat) ## b            <- confidence_band_fragm(x  = c(hat_mu_f - hat_mu_m),                                        diag.cov.x = diag_cov_x,                                        tau        = tau,                                        df         = min(c(n_f,n_m)) - 1,                                        type       = \"FFSCB.t\",                                        conf.level = (1-0.05),                                        n_int      = 2)  slct_FFSCB_t <- grepl(pattern = \"FFSCB.t\", colnames(b))  hat_mu_diff  <- b[,1] FFSCB_t_band <- b[,slct_FFSCB_t] #FFSCB_res$band[,-1]   width     <- 7 height    <- 3.8 cex       <- 1 cexs      <- 0.95 mar       <- c(3.25, 2.1, 2.1, 2.1) ## par(mfrow=c(1,1), family = \"serif\", ps=13, cex.main=.99, font.main = 1, mar=mar) matplot(y=cbind(FFSCB_t_band),  x=grid, type=\"n\", xlab=\"\", ylab=\"\") polygon(x=c(grid,rev(grid)),          y=c(FFSCB_t_band[,2],rev(FFSCB_t_band[,1])), col = gray(.75), border = gray(.75)) abline(  h = 0, lwd=0.7) lines(   y = hat_mu_diff,  x = grid, col=1, lty=1) axis(4, at = 0, labels = expression(H[0]:~theta[f]-theta[m]==0)) legend(x=11, y=-0.01, legend = c(expression(paste(\"Estimated mean diff.\")), expression(FF[\"frag,t\"]^\"2,2S\")),         lty=c(1,1), bty=\"n\", lwd = c(1.5,10), col=c(\"black\", gray(.75)), cex =cexs, seg.len=2)#x=10.5,y=-0.11 mtext(text = \"Differences in mean functions\", 3, line = 0.4, adj = 0, cex=cex) mtext(text = \"Age\", 1, line = 2.25, cex=cexs)"},{"path":"/reference/Biomechanics.html","id":null,"dir":"Reference","previous_headings":"","what":"Biomechanics Data (Biomechanics_Data) — Biomechanics","title":"Biomechanics Data (Biomechanics_Data) — Biomechanics","text":"Paired sample n=11 subjects.","code":""},{"path":"/reference/Biomechanics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Biomechanics Data (Biomechanics_Data) — Biomechanics","text":"","code":"Biomechanics"},{"path":"/reference/Biomechanics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Biomechanics Data (Biomechanics_Data) — Biomechanics","text":"Variables: Stance_Phase percent Extra_Cushioned_1:Extra_Cushioned_11 Torque curves (N m / kg) running extra cushioned running shoes. Normal_Cushioned_1:Normal_Cushioned_11 Torque curves (N m / kg) running normal cushioned running shoes.","code":""},{"path":"/reference/Biomechanics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Biomechanics Data (Biomechanics_Data) — Biomechanics","text":"subject performed one running stride extra cushioned  running shoe one running stride normally cushioned  running shoe. Measured outcome:  Torque (N m / kg) ankle joint sagittal pane stance phase standardized respect bodyweight subjects.","code":""},{"path":"/reference/Data2bifd.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a bifd object from a matrix. — Data2bifd","title":"Creates a bifd object from a matrix. — Data2bifd","text":"Creates bifd object matrix.","code":""},{"path":"/reference/Data2bifd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a bifd object from a matrix. — Data2bifd","text":"","code":"Data2bifd(   sargvals = NULL,   targvals = NULL,   y = NULL,   sbasisobj = NULL,   tbasisobj = NULL,   Lfdobjs = NULL,   Lfdobjt = NULL,   lambdas = NULL,   lambdat = NULL )"},{"path":"/reference/Data2bifd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a bifd object from a matrix. — Data2bifd","text":"sargvals Argument values `s' matrix input y(s,t). targvals Argument values `t' matrix input y(s,t). y Data (one) matrix. sbasisobj basisfd object `s' tbasisobj basisfd object `t' Lfdobjs Number derivatives used smoothing along `s'. smoohting done NULL Lfdobjt Number derivatives used smoothing along `t'. smoohting done NULL lambdas Weight smoothing along `s' lambdat Weight smoothing along `t'","code":""},{"path":"/reference/Fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"Spinal bone mineral density measurements (Fragments) — Fragments","title":"Spinal bone mineral density measurements (Fragments) — Fragments","text":"Relative spinal bone mineral density (spnbmd) measurements 261 North American adolescents.  value difference spnbmd taken two consecutive visits, divided average. age average age two visits.","code":""},{"path":"/reference/Fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spinal bone mineral density measurements (Fragments) — Fragments","text":"","code":"Fragments"},{"path":"/reference/Fragments.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Spinal bone mineral density measurements (Fragments) — Fragments","text":"Variables: Y_f.spnbmd measurements female subjects =1,...,140 X_f.ages female subjects time measurements Y_m.spnbmd measurements male subjects =1,...,113 X_m.ages male subjects time measurements","code":""},{"path":"/reference/Fragments.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Spinal bone mineral density measurements (Fragments) — Fragments","text":"http://web.stanford.edu/~hastie/ElemStatLearn/","code":""},{"path":"/reference/Fragments.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spinal bone mineral density measurements (Fragments) — Fragments","text":"Bachrach LK, Hastie T, Wang M-C, Narasimhan B, Marcus R. Bone Mineral  Acquisition Healthy Asian, Hispanic, Black Caucasian Youth.  Longitudinal Study. J Clin Endocrinol Metab (1999) 84, 4702-12.","code":""},{"path":"/reference/confidence_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes confidence bands — confidence_band","title":"Makes confidence bands — confidence_band","text":"Makes confidence bands","code":""},{"path":"/reference/confidence_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes confidence bands — confidence_band","text":"","code":"confidence_band(   x,   cov.x,   tau = NULL,   df = NULL,   type = c(\"FFSCB.z\", \"FFSCB.t\", \"BEc\", \"Bs\", \"naive.t\"),   conf.level = 0.95,   grid.size = 200,   Bs.sim.size = 10000,   n_int = 4 )"},{"path":"/reference/confidence_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes confidence bands — confidence_band","text":"x Functional parameter estimate (instance, empirical mean function). can either vector fd object fda package. cov.x Cov(x), x functional estimator (instance, covariance function empirical mean function). can either matrix bifd object fda. eigen decomposition Cov(X) can used instead. tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). df Degrees freedom parameter t-distribution based bands 'FFSCB.t' 'naive.t'. x empirical mean function, set df=n-1, n denotes sample size. type band(s) constructed. FFSCB.z : Fast'n'Fair (adaptive) simultaneous confidence band based Gaussian functional parameter estimate. FFSCB.t : Fast'n'Fair (adaptive) simultaneous confidence band based t-distributed functional parameter estimate. BEc : suggested modified Scheffe style band hyper-ellipsoie Ec, uses last dimension. Bs : Parametric bootstrap simultaneous confidence band, similar one appeard Degras(2011) (comparision purpose) naive.t : collection point-wise t-intervals. (comparision purpose) conf.level vector confidence levels bands achieve. grid.size determines fine grid bands constructed converted `fd' object. parameter used 'x' fd object 'cov.x' bifd object. Bs.sim.size determines bootstrap sample size Bs n_int Number intervals piecewise linear confidence bounds.","code":""},{"path":"/reference/confidence_band.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes confidence bands — confidence_band","text":"confidence_band Either collection vector valued bands `fd' object whose objectname changed confidence_band.","code":""},{"path":"/reference/confidence_band.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Makes confidence bands — confidence_band","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands. Choi, H. Reimherr, M. (2018). geometric approach confidence regions bands functional parameters. Journal Royal Statistical Society: Series B (Statistical Methodology) 80 239-260.","code":""},{"path":"/reference/confidence_band.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Makes confidence bands — confidence_band","text":"","code":"# Generate a sample p          <- 200  N          <- 80  grid       <- make_grid(p, rangevals=c(0,1)) mu0        <- meanf_poly(grid,c(0,1))    names(mu0) <- grid mu         <- meanf_poly(grid,c(0,1.1))  names(mu)  <- grid cov.m      <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1)) sample     <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N  # Compute the tau-parameter  hat.tau    <- tau_fun(sample)  # Make and plot confidence bands b <- confidence_band(x=hat.mu, cov.x=hat.cov.mu, tau=hat.tau, df=N-1,                      type=c(\"FFSCB.t\", \"Bs\",\"BEc\",\"naive.t\"),                      conf.level  = 0.95, n_int=4) plot(b) lines(x=grid, y=mu0, lty=2)"},{"path":"/reference/confidence_band_fragm.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","title":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","text":"Makes confidence bands fragmentary functional data","code":""},{"path":"/reference/confidence_band_fragm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","text":"","code":"confidence_band_fragm(   x,   diag.cov.x,   tau = NULL,   df = NULL,   type = c(\"FFSCB.z\", \"FFSCB.t\", \"naive.t\"),   conf.level = 0.95,   n_int = 2 )"},{"path":"/reference/confidence_band_fragm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","text":"x Functional parameter estimate (instance, empirical mean function). can either vector fd object fda. diag.cov.x diag(Cov(x)), x functional estimator (instance, covariance function empirical mean function). can either matrix bifd object fda. eigen decomposition Cov(X) can used instead. tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). df Degrees freedom parameter t-distribution based bands 'FFSCB.t' 'naive.t'. x empirical mean function, set df=n-1, n denotes sample size. type band(s) constructed. FFSCB.z : Fast'n'Fair (adaptive) simultaneous confidence band based Gaussian functional parameter estimate. FFSCB.t : Fast'n'Fair (adaptive) simultaneous confidence band based t-distributed functional parameter estimate. conf.level vector confidence levels bands achieve. n_int Number intervals piecewise linear confidence bounds.","code":""},{"path":"/reference/confidence_band_fragm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","text":"confidence_band_fragm","code":""},{"path":"/reference/confidence_band_fragm.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Makes confidence bands for fragmentary functional data — confidence_band_fragm","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands.","code":""},{"path":"/reference/cov2tau_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","title":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","text":"function computes estimate roughness parameter function tau(t) using covariance function (given matrix) functional data.","code":""},{"path":"/reference/cov2tau_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","text":"","code":"cov2tau_fun(cov_mat, warn = FALSE)"},{"path":"/reference/cov2tau_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","text":"cov_mat Matrix (pxp) evaluated covariance function (p=number discretization point). Caution: assumed evaluation grid within [0,1]. warn Option printing warnings","code":""},{"path":"/reference/cov2tau_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","text":"tau_t Estimate roughness parameter function tau(t)","code":""},{"path":"/reference/cov2tau_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function computes the estimate of the roughness parameter function tau(t) using the covariance function (given as a matrix) of the functional data. — cov2tau_fun","text":"","code":"p         <- 200  N         <- 10 rangeval  <- c(0,1) grid      <- make_grid(p, rangevals=rangeval) mu        <- meanf_poly(grid, params = c(0,0))   # Generate random functions using a stationary  # covariance function (homogeneous roughness (HR)) cov.m = make_cov_m(cov.f = covf_st_matern, grid=grid,  cov.f.params=c(2,2,2)) X_HR  <-  make_sample(mean.v = mu, cov.m = cov.m, N = N, dist = \"rnorm\")  # Generate random functions using non-stationary  # covariance function (increasing roughness (IR)) cov.m = make_cov_m(cov.f = covf_nonst_matern, grid=grid,  cov.f.params=c(3/2, 1/2, 2)) X_IR  <-  make_sample(mean.v = mu, cov.m = cov.m, N = N, dist = \"rnorm\")  # Estimate covariance functions hat_mu_HR   <- rowMeans(X_HR) hat_cov_HR  <- crossprod(t(X_HR - hat_mu_HR)) / (N-1)  hat_mu_IR   <- rowMeans(X_IR) hat_cov_IR  <- crossprod(t(X_IR - hat_mu_IR)) / (N-1)  # Estimate tau(t): tau_HR <- cov2tau_fun(hat_cov_HR) tau_IR <- cov2tau_fun(hat_cov_IR)  # Plot data and estimated tau() functions par(mfrow=c(2,2)) matplot(x=grid, y=X_HR, type=\"l\", main=\"Homogeneous Roughness\",  ylab=\"X(t)\", xlab=\"\") matplot(x=grid, y=X_IR, type=\"l\", main=\"Increasing Roughness\",   ylab=\"X(t)\", xlab=\"\") plot(x=grid, y=tau_HR,  type=\"l\", main=\"Homogeneous Roughness\",  ylab=\"tau(t)\", xlab=\"\", ylim=range(tau_HR, tau_IR)) plot(x=grid, y=tau_IR,  type=\"l\", main=\"Increasing Roughness\",   ylab=\"tau(t)\", xlab=\"\", ylim=range(tau_HR, tau_IR))  par(mfrow=c(1,1))"},{"path":"/reference/cov_fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate covariance function from fragmentary functional data — cov_fragments","title":"Estimate covariance function from fragmentary functional data — cov_fragments","text":"Estimate covariance function fragmentary functional data","code":""},{"path":"/reference/cov_fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate covariance function from fragmentary functional data — cov_fragments","text":"","code":"cov_fragments(X_mat)"},{"path":"/reference/cov_fragments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate covariance function from fragmentary functional data — cov_fragments","text":"X_mat nxp Matrix fragmentary observed functional data subjects =1,...,p stored column-wise. Missing data assumed set NA.","code":""},{"path":"/reference/covf_nonst_matern.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified Matern Covariance Function (varying roughness parameter) — covf_nonst_matern","title":"Modified Matern Covariance Function (varying roughness parameter) — covf_nonst_matern","text":"Modified Matern Covariance Function (varying roughness parameter)","code":""},{"path":"/reference/covf_nonst_matern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified Matern Covariance Function (varying roughness parameter) — covf_nonst_matern","text":"","code":"covf_nonst_matern(x1, x2, params = c(3/2, 1/2, 1))"},{"path":"/reference/covf_nonst_matern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified Matern Covariance Function (varying roughness parameter) — covf_nonst_matern","text":"x1 First argument cov(x1,x2). Caution: assumed 0<=x1<=1. x2 Second argument cov(x1,x2). Caution: assumed 0<=x2<=1. params Covariance function parameters: params=c(nu1, nu2, sigma).","code":""},{"path":"/reference/covf_st_matern.html","id":null,"dir":"Reference","previous_headings":"","what":"Matern Covariance Function — covf_st_matern","title":"Matern Covariance Function — covf_st_matern","text":"Matern Covariance Function","code":""},{"path":"/reference/covf_st_matern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matern Covariance Function — covf_st_matern","text":"","code":"covf_st_matern(x1, x2, params = c(1, 1))"},{"path":"/reference/covf_st_matern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matern Covariance Function — covf_st_matern","text":"x1 First argument cov(x1,x2). x2 Second argument cov(x1,x2). params Matern covariance function parameters: params=c(nu, sigma).","code":""},{"path":"/reference/eigen.fd.html","id":null,"dir":"Reference","previous_headings":"","what":"Takes eigen decomposition of bifd covariance object. — eigen.fd","title":"Takes eigen decomposition of bifd covariance object. — eigen.fd","text":"Takes eigen decomposition bifd covariance object.","code":""},{"path":"/reference/eigen.fd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Takes eigen decomposition of bifd covariance object. — eigen.fd","text":"","code":"eigen.fd(cov.fd)"},{"path":"/reference/eigen.fd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Takes eigen decomposition of bifd covariance object. — eigen.fd","text":"cov.fd Covariance operator bifd object (fda package). Use Data2bifd convert covariance matrix bifd object.","code":""},{"path":"/reference/ffscb.html","id":null,"dir":"Reference","previous_headings":"","what":"ffscb — ffscb","title":"ffscb — ffscb","text":"package contains example codes inferential tools suggested Liebl Reimherr (2019), titled 'Fast Fair Simultaneous Confidence Bands Functional Parameters'. top level functions allow construct simultaneous confidence bands pvalue functions. inputs can either vector/matrix fd/bifd object fda package.","code":""},{"path":"/reference/ffscb.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"ffscb — ffscb","text":"Liebl, D. Reimherr, M. (2019). Fast fair simultaneous confidence bands functional parameters.","code":""},{"path":"/reference/ffscb.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"ffscb — ffscb","text":"","code":"# Generate a sample p          <- 200  N          <- 80  grid       <- make_grid(p, rangevals=c(0,1)) mu0        <- meanf_poly(grid,c(0,1))    names(mu0) <- grid mu         <- meanf_poly(grid,c(0,1.1))  names(mu)  <- grid cov.m      <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1)) sample     <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N  # Compute the tau-parameter (for the KR- and FFSCB-bands) hat.tau    <- tau_fun(sample)  # Make and plot confidence bands b <- confidence_band(x=hat.mu, cov.x=hat.cov.mu, tau=hat.tau, df=N-1,                      type=c(\"FFSCB.t\", \"Bs\",\"BEc\",\"naive.t\"),                      conf.level  = 0.95) plot(b) lines(x=grid, y=mu0, lty=2)"},{"path":"/reference/get_pval_Ec.html","id":null,"dir":"Reference","previous_headings":"","what":"p-value (ellipsoid region) — get_pval_Ec","title":"p-value (ellipsoid region) — get_pval_Ec","text":"p-value (ellipsoid region)","code":""},{"path":"/reference/get_pval_Ec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"p-value (ellipsoid region) — get_pval_Ec","text":"","code":"get_pval_Ec(x, x0 = NULL, eigen, fpc.cut = NULL, prec = NULL)"},{"path":"/reference/get_pval_Ec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"p-value (ellipsoid region) — get_pval_Ec","text":"x function argument x0 Functional parameter null hypothesis. Zero function assumed given. eigen eigen decomposition covariance function fpc.cut takes vector number fPC use HT. integer values, fPC values used. value 0 1, specifies proportion (estimated) variance explained fPCs. 0, available fPCs used long size eigenvalues greater .Machine$double.eps. prec determines accuracy imhof. One may try modify p-value achieved Ellipsoid form Epc gives negative value. form c(epsabs, epsrel, limit).","code":""},{"path":"/reference/get_pval_Ec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"p-value (ellipsoid region) — get_pval_Ec","text":"Choi, H. Reimherr, M. (2018). geometric approach confidence regions bands functional parameters. Journal Royal Statistical Society: Series B (Statistical Methodology) 80 239-260.","code":""},{"path":"/reference/get_pval_Ec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"p-value (ellipsoid region) — get_pval_Ec","text":"","code":"# Generate a sample p <- 200  N <- 80  grid   <- make_grid(p, rangevals=c(0,1)) mu0    <- meanf_poly(grid,c(0,1))   ; names(mu0) <- grid mu     <- meanf_poly(grid,c(0,1.1)) ; names(mu)  <- grid cov.m  <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1,1)) sample <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N  # Eigen decomposition e.cov.mu <- eigen(hat.cov.mu)  # pvalue pval <- get_pval_Ec(x=hat.mu, x0=mu0, eigen=e.cov.mu) #> Warning: Note that Qq + abserr is positive. pval #> [1] -2.024324e-09"},{"path":"/reference/get_pvalue_FFSCB_t.html","id":null,"dir":"Reference","previous_headings":"","what":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","title":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","text":"FFSCB p-value (t-distr)","code":""},{"path":"/reference/get_pvalue_FFSCB_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","text":"","code":"get_pvalue_FFSCB_t(   x,   x0 = NULL,   tau,   diag.cov,   df,   eval.points = NULL,   n_int = 5 )"},{"path":"/reference/get_pvalue_FFSCB_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","text":"x Functional parameter estimate (instance, empirical mean function). x0 Functional parameter null hypothesis. Default: zero. tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). diag.cov diagonal Cov(x), x functional estimator. instance, diagonal discretized covariance function empirical mean function x. df Degrees freedom parameter t-distribution based band 'FFSCB.t'. (Typically, df=N-1) eval.points Evaluation points ([0,1]) pvalues computed. n_int Number intervals parameter used function make_band_FFSCB_t()","code":""},{"path":"/reference/get_pvalue_FFSCB_t.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands.","code":""},{"path":"/reference/get_pvalue_FFSCB_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FFSCB p-value (t-distr) — get_pvalue_FFSCB_t","text":"","code":"# Generate a sample p <- 200  N <- 80  grid   <- make_grid(p, rangevals=c(0,1)) mu0    <- meanf_poly(grid,c(0,1))   ; names(mu0) <- grid mu     <- meanf_poly(grid,c(0,1.1)) ; names(mu)  <- grid cov.m  <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1,1)) sample <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N hat.tau    <- tau_fun(sample)  # Compute simultaneous pvalue function pval <- get_pvalue_FFSCB_t(x=hat.mu, x0=mu0, tau=hat.tau,                             diag.cov=diag(hat.cov.mu), df=N-1,                             eval.points=c(0.25, 0.75)) pval #> [1] 0.5486224 0.9999344"},{"path":"/reference/get_pvalue_FFSCB_z.html","id":null,"dir":"Reference","previous_headings":"","what":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","title":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","text":"FFSCB p-value (Gaussian)","code":""},{"path":"/reference/get_pvalue_FFSCB_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","text":"","code":"get_pvalue_FFSCB_z(x, x0 = NULL, tau, diag.cov, eval.points = NULL, n_int = 5)"},{"path":"/reference/get_pvalue_FFSCB_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","text":"x Functional parameter estimate (instance, empirical mean function). x0 Functional parameter null hypothesis. Default: zero. tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). diag.cov diagonal Cov(x), x functional estimator. instance, diagonal discretized covariance function empirical mean function x. eval.points Evaluation points ([0,1]) pvalues computed. n_int Number intervals parameter used function make_band_FFSCB_z()","code":""},{"path":"/reference/get_pvalue_FFSCB_z.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands.","code":""},{"path":"/reference/get_pvalue_FFSCB_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"FFSCB p-value (Gaussian) — get_pvalue_FFSCB_z","text":"","code":"# Generate a sample p <- 200  N <- 80  grid   <- make_grid(p, rangevals=c(0,1)) mu0    <- meanf_poly(grid,c(0,1))   ; names(mu0) <- grid mu     <- meanf_poly(grid,c(0,1.1)) ; names(mu)  <- grid cov.m  <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1,1)) sample <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N hat.tau    <- tau_fun(sample)  # pvalue pval <- get_pvalue_FFSCB_z(x=hat.mu, x0=mu0, tau=hat.tau,                             diag.cov=diag(hat.cov.mu),                             eval.points=c(.25,.75)) pval #> [1] 0.9999339 0.9999396"},{"path":"/reference/locate_crossings.html","id":null,"dir":"Reference","previous_headings":"","what":"Locate crossings — locate_crossings","title":"Locate crossings — locate_crossings","text":"Locate crossings","code":""},{"path":"/reference/locate_crossings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Locate crossings — locate_crossings","text":"","code":"locate_crossings(x_vec, threshold, type = c(\"up\", \"down\"))"},{"path":"/reference/locate_crossings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Locate crossings — locate_crossings","text":"x_vec Vector might cross given threshold threshold Threshold-vector type locate '' '' crossings?","code":""},{"path":"/reference/make_band_FFSCB_t.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","title":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","text":"Fast 'n' fair simultaneous confidence band (t-distr)","code":""},{"path":"/reference/make_band_FFSCB_t.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","text":"","code":"make_band_FFSCB_t(x, diag.cov.x, tau, df, conf.level = 0.95, n_int = 4)"},{"path":"/reference/make_band_FFSCB_t.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","text":"x Functional parameter estimate. diag.cov.x Diagonal Cov(x), x functional estimator (instance, covariance function empirical mean function). tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). df Degrees freedom conf.level confidence level (default: 0.95) n_int Number equidistant intervals multiple testing component type-error rate (1-conf.level) distributed uniformly.","code":""},{"path":"/reference/make_band_FFSCB_t.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands.","code":""},{"path":"/reference/make_band_FFSCB_t.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast 'n' fair simultaneous confidence band (t-distr) — make_band_FFSCB_t","text":"","code":"# Generate a sample p          <- 200  N          <- 80  grid       <- make_grid(p, rangevals=c(0,1)) mu         <- meanf_poly(grid,c(0,1.1))  names(mu)  <- grid cov.m      <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1,1)) sample     <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N  # Compute the tau-parameter  hat.tau    <- tau_fun(sample)  # Make and plot confidence bands band <- make_band_FFSCB_t(x=hat.mu, diag.cov.x=diag(hat.cov.mu), tau=hat.tau,                        df = N-1, conf.level  = 0.95) matplot(y=band[,2:3], x=grid, lty=2) lines(x=grid, y=band[,1], lty=1)"},{"path":"/reference/make_band_FFSCB_z.html","id":null,"dir":"Reference","previous_headings":"","what":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","title":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","text":"Fast 'n' fair simultaneous confidence band (Gaussian)","code":""},{"path":"/reference/make_band_FFSCB_z.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","text":"","code":"make_band_FFSCB_z(x, diag.cov.x, tau, conf.level = 0.95, n_int = 4)"},{"path":"/reference/make_band_FFSCB_z.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","text":"x Functional parameter estimate. diag.cov.x Diagonal Cov(x), x functional estimator (instance, covariance function empirical mean function). tau Pointwise standard deviation standardized differentiated sample functions. Can estimated tau_fun(). conf.level confidence level (default: 0.95) n_int Number equidistant intervals multiple testing component type-error rate (1-conf.level) distributed uniformly.","code":""},{"path":"/reference/make_band_FFSCB_z.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","text":"Liebl, D. Reimherr, M. (2022+). Fast fair simultaneous confidence bands.","code":""},{"path":"/reference/make_band_FFSCB_z.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fast 'n' fair simultaneous confidence band (Gaussian) — make_band_FFSCB_z","text":"","code":"# Generate a sample p          <- 200  N          <- 80  grid       <- make_grid(p, rangevals=c(0,1)) mu         <- meanf_poly(grid,c(0,1.1))  names(mu)  <- grid cov.m      <- make_cov_m(cov.f = covf_st_matern, grid=grid, cov.f.params=c(2/2,1,1)) sample     <- make_sample(mu,cov.m,N)  # Compute the estimate and its covariance hat.mu     <- rowMeans(sample) hat.cov    <- crossprod(t(sample - hat.mu)) / N hat.cov.mu <- hat.cov / N  # Compute the tau-parameter hat.tau    <- tau_fun(sample)  # Make and plot confidence bands band <- make_band_FFSCB_z(x=hat.mu, diag.cov.x=diag(hat.cov.mu), tau=hat.tau,                        conf.level  = 0.95) matplot(y=band[,2:3], x=grid, lty=2) lines(x=grid, y=band[,1], lty=1)"},{"path":"/reference/make_cov_m.html","id":null,"dir":"Reference","previous_headings":"","what":"Make discretized covariance function — make_cov_m","title":"Make discretized covariance function — make_cov_m","text":"Make discretized covariance function","code":""},{"path":"/reference/make_cov_m.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make discretized covariance function — make_cov_m","text":"","code":"make_cov_m(cov.f = covf_st_matern, grid, cov.f.params = NULL)"},{"path":"/reference/make_cov_m.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make discretized covariance function — make_cov_m","text":"cov.f Covariance function grid Evaluation-grid cov.f.params Parameters covariance function","code":""},{"path":"/reference/make_fragm_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sample (for simulation) — make_fragm_sample","title":"Make sample (for simulation) — make_fragm_sample","text":"Make sample (simulation)","code":""},{"path":"/reference/make_fragm_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sample (for simulation) — make_fragm_sample","text":"","code":"make_fragm_sample(   mean.v,   cov.m,   N,   fragm_len,   grid = NULL,   dist = \"rnorm\",   ... )"},{"path":"/reference/make_fragm_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sample (for simulation) — make_fragm_sample","text":"mean.v Mean-Vector (discretized mean function) cov.m Covariance-Matrix (discretized covariance function) N Number functions fragm_len Number evaluation points per fragment grid Grid [0,1]. Default: grid <- seq(0,1,length(mean.v)) dist Distribution ... parameters dist","code":""},{"path":"/reference/make_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Make grid — make_grid","title":"Make grid — make_grid","text":"Make grid","code":""},{"path":"/reference/make_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make grid — make_grid","text":"","code":"make_grid(p = 100, rangevals = c(0, 1))"},{"path":"/reference/make_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make grid — make_grid","text":"p Length grid rangevals Endpoints grid","code":""},{"path":"/reference/make_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Make sample (for simulation) — make_sample","title":"Make sample (for simulation) — make_sample","text":"Make sample (simulation)","code":""},{"path":"/reference/make_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Make sample (for simulation) — make_sample","text":"","code":"make_sample(mean.v, cov.m, N, dist = \"rnorm\", ...)"},{"path":"/reference/make_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Make sample (for simulation) — make_sample","text":"mean.v Mean-Vector (discretized mean function) cov.m Covariance-Matrix (discretized covariance function) N Number functions dist Distribution ... parameters dist","code":""},{"path":"/reference/meanf_bump.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction with local bump — meanf_bump","title":"Meanfunction with local bump — meanf_bump","text":"Meanfunction local bump","code":""},{"path":"/reference/meanf_bump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction with local bump — meanf_bump","text":"","code":"meanf_bump(x, quarter = 1, height = 0.1)"},{"path":"/reference/meanf_bump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction with local bump — meanf_bump","text":"x function argument quarter 1,2,3, 4 select domain-quarter. height height bump function","code":""},{"path":"/reference/meanf_bump.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction with local bump — meanf_bump","text":"","code":"curve(meanf_bump(x, 1), from=0, to=1, main=\"Meanfct Ellipse\", ylab=\"\",xlab=\"\") curve(meanf_bump(x, 2), from=0, to=1,  lty=2, add=TRUE)"},{"path":"/reference/meanf_ellipse.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction with local ellipse — meanf_ellipse","title":"Meanfunction with local ellipse — meanf_ellipse","text":"Meanfunction local ellipse","code":""},{"path":"/reference/meanf_ellipse.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction with local ellipse — meanf_ellipse","text":"","code":"meanf_ellipse(x, params = c(0, 1/4, 1/5))"},{"path":"/reference/meanf_ellipse.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction with local ellipse — meanf_ellipse","text":"x function argument params parameters params=c(start, end, height)","code":""},{"path":"/reference/meanf_ellipse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction with local ellipse — meanf_ellipse","text":"","code":"curve(meanf_ellipse(x, c(0, 0.25, 0.1)), from=0, to=1, main=\"Meanfct Ellipse\", ylab=\"\",xlab=\"\") curve(meanf_ellipse(x, c(0.50, 0.75, 0.1)), from=0, to=1,  lty=2, add=TRUE)"},{"path":"/reference/meanf_localshift.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction with local peak (polynomial with simple local peak) — meanf_localshift","title":"Meanfunction with local peak (polynomial with simple local peak) — meanf_localshift","text":"Meanfunction local peak (polynomial simple local peak)","code":""},{"path":"/reference/meanf_localshift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction with local peak (polynomial with simple local peak) — meanf_localshift","text":"","code":"meanf_localshift(x, delta = 0)"},{"path":"/reference/meanf_localshift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction with local peak (polynomial with simple local peak) — meanf_localshift","text":"x function argument delta shifting parameter","code":""},{"path":"/reference/meanf_localshift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction with local peak (polynomial with simple local peak) — meanf_localshift","text":"","code":"curve(meanf_localshift(x, 0), from=0, to=1, lty=2) curve(meanf_localshift(x,.1), from=0, to=1, lty=1, add=TRUE)"},{"path":"/reference/meanf_peak.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction with local peak — meanf_peak","title":"Meanfunction with local peak — meanf_peak","text":"Meanfunction local peak","code":""},{"path":"/reference/meanf_peak.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction with local peak — meanf_peak","text":"","code":"meanf_peak(x, params = c(0, 1, 2, 16, 1))"},{"path":"/reference/meanf_peak.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction with local peak — meanf_peak","text":"x function argument params Parameters","code":""},{"path":"/reference/meanf_peak.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction with local peak — meanf_peak","text":"","code":"curve(meanf_peak(x, c(0,1,2,16,1)), from=0, to=1,  main=\"Meanfct Peak\", ylab=\"\",xlab=\"\") curve(meanf_peak(x, c(-1,1,2,16,1)), from=0, to=1,  lty=2, add=TRUE) curve(meanf_peak(x, c(0,2,2,16,1)), from=0, to=1,  lty=2, add=TRUE) curve(meanf_peak(x, c(0,1,1+1,10,1)), from=0, to=1,  lty=2, add=TRUE)"},{"path":"/reference/meanf_poly.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction (polynomial) — meanf_poly","title":"Meanfunction (polynomial) — meanf_poly","text":"Meanfunction (polynomial)","code":""},{"path":"/reference/meanf_poly.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction (polynomial) — meanf_poly","text":"","code":"meanf_poly(x, params = c(0, 1))"},{"path":"/reference/meanf_poly.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction (polynomial) — meanf_poly","text":"x function argument params Parameters: params=c(shift,scale).","code":""},{"path":"/reference/meanf_poly.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction (polynomial) — meanf_poly","text":"","code":"curve(meanf_poly(x, c(0,2)), from=0, to=1,  main=\"Meanfct Poly\", ylab=\"\",xlab=\"\") curve(meanf_poly(x, c(0,1)), from=0, to=1,  lty=2, add=TRUE)"},{"path":"/reference/meanf_rect.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction with local rectangles (polynomial with simple local rectangles) — meanf_rect","title":"Meanfunction with local rectangles (polynomial with simple local rectangles) — meanf_rect","text":"Meanfunction local rectangles (polynomial simple local rectangles)","code":""},{"path":"/reference/meanf_rect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction with local rectangles (polynomial with simple local rectangles) — meanf_rect","text":"","code":"meanf_rect(x, delta = 1/5, rect = c(0, 0.125))"},{"path":"/reference/meanf_rect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction with local rectangles (polynomial with simple local rectangles) — meanf_rect","text":"x function argument delta hight rectangle rect location rectangle","code":""},{"path":"/reference/meanf_rect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction with local rectangles (polynomial with simple local rectangles) — meanf_rect","text":"","code":"curve(meanf_rect(x, delta=1/5), from=0, to=1, main=\"Meanfct Rect\", ylab=\"\",xlab=\"\") curve(meanf_rect(x, delta=1/10), from=0, to=1,  lty=2, add=TRUE)"},{"path":"/reference/meanf_scale.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction (polynomial with simple scaling) — meanf_scale","title":"Meanfunction (polynomial with simple scaling) — meanf_scale","text":"Meanfunction (polynomial simple scaling)","code":""},{"path":"/reference/meanf_scale.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction (polynomial with simple scaling) — meanf_scale","text":"","code":"meanf_scale(x, delta = 0)"},{"path":"/reference/meanf_scale.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction (polynomial with simple scaling) — meanf_scale","text":"x function argument delta scaling parameter","code":""},{"path":"/reference/meanf_scale.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction (polynomial with simple scaling) — meanf_scale","text":"","code":"curve(meanf_scale(x, 1), from=0, to=1) curve(meanf_scale(x, 0), from=0, to=1, lty=2, add=TRUE)"},{"path":"/reference/meanf_shift.html","id":null,"dir":"Reference","previous_headings":"","what":"Meanfunction (polynomial with simple shifting) — meanf_shift","title":"Meanfunction (polynomial with simple shifting) — meanf_shift","text":"Meanfunction (polynomial simple shifting)","code":""},{"path":"/reference/meanf_shift.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meanfunction (polynomial with simple shifting) — meanf_shift","text":"","code":"meanf_shift(x, delta = 0)"},{"path":"/reference/meanf_shift.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meanfunction (polynomial with simple shifting) — meanf_shift","text":"x function argument delta shifting parameter","code":""},{"path":"/reference/meanf_shift.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meanfunction (polynomial with simple shifting) — meanf_shift","text":"","code":"curve(meanf_shift(x, 0), from=0, to=1, lty=2) curve(meanf_shift(x,.1), from=0, to=1, lty=1, add=TRUE)"},{"path":"/reference/n_ts.html","id":null,"dir":"Reference","previous_headings":"","what":"Count number of observations in X_i(t)*X_i(s), i=1...,n, with fragmentary functional data X_i — n_ts","title":"Count number of observations in X_i(t)*X_i(s), i=1...,n, with fragmentary functional data X_i — n_ts","text":"Count number observations X_i(t)*X_i(s), =1...,n, fragmentary functional data X_i","code":""},{"path":"/reference/n_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count number of observations in X_i(t)*X_i(s), i=1...,n, with fragmentary functional data X_i — n_ts","text":"","code":"n_ts(X_mat)"},{"path":"/reference/n_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count number of observations in X_i(t)*X_i(s), i=1...,n, with fragmentary functional data X_i — n_ts","text":"X_mat nxp Matrix fragmentary observed functional data subjects =1,...,p stored column-wise. Missing data assumed set NA.","code":""},{"path":"/reference/plot.confidence_band.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualizes confidence bands constructed from confidence_band. — plot.confidence_band","title":"Visualizes confidence bands constructed from confidence_band. — plot.confidence_band","text":"Visualizes confidence bands constructed confidence_band.","code":""},{"path":"/reference/plot.confidence_band.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualizes confidence bands constructed from confidence_band. — plot.confidence_band","text":"","code":"# S3 method for confidence_band plot(x, center = TRUE, legendx = \"topleft\", legendy = NULL, ...)"},{"path":"/reference/plot.confidence_band.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualizes confidence bands constructed from confidence_band. — plot.confidence_band","text":"x 'confidence_band' object, output confidence_band funciton. center Whether include functional estimate . legendx position `x' legend. NULL passed, legend drawn (However, may added manually) legendy position `y' legend. ... Graphical parameters passed/overrided. 'center' TRUE, first elements 'col', 'lwd', 'lty' used estimate next ones used bands, using values one pair, .e., lower upper bounds.","code":""},{"path":"/reference/tau_fragments.html","id":null,"dir":"Reference","previous_headings":"","what":"R-function for computing tau from fragmentary functional data.\nCaution: only one single fragment per function is assumed. — tau_fragments","title":"R-function for computing tau from fragmentary functional data.\nCaution: only one single fragment per function is assumed. — tau_fragments","text":"R-function computing tau fragmentary functional data. Caution: one single fragment per function assumed.","code":""},{"path":"/reference/tau_fragments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R-function for computing tau from fragmentary functional data.\nCaution: only one single fragment per function is assumed. — tau_fragments","text":"","code":"tau_fragments(X_mat, grid_mat)"},{"path":"/reference/tau_fragments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R-function for computing tau from fragmentary functional data.\nCaution: only one single fragment per function is assumed. — tau_fragments","text":"X_mat Matrix sample functions (nrow=p, ncol=n, p=number discretization point, n=sample size). grid_mat Matrix (pxn) grid points fragments observed.","code":""},{"path":"/reference/tau_fun.html","id":null,"dir":"Reference","previous_headings":"","what":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","title":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","text":"function computes estimate roughness parameter function tau(t) using pointwise standard deviation standardized differentiated sample functions.","code":""},{"path":"/reference/tau_fun.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","text":"","code":"tau_fun(x)"},{"path":"/reference/tau_fun.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","text":"x Matrix sample functions (nrow=p, ncol=n, p=number discretization point, n=sample size).","code":""},{"path":"/reference/tau_fun.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","text":"tau_t Pointwise standard deviation standardized differentiated sample functions.","code":""},{"path":"/reference/tau_fun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"This function computes the estimate of the roughness parameter function tau(t) using the pointwise standard deviation of the standardized and differentiated sample functions. — tau_fun","text":"","code":"p         <- 200  N         <- 10 rangeval  <- c(0,1) grid      <- make_grid(p, rangevals=rangeval) mu        <- meanf_poly(grid, params = c(0,0))   # Generate random functions using a stationary  # covariance function (homogeneous roughness (HR)) cov.m = make_cov_m(cov.f = covf_st_matern, grid=grid,  cov.f.params=c(2,2)) X_HR  <-  make_sample(mean.v = mu, cov.m = cov.m, N = N, dist = \"rnorm\")  # Generate random functions using non-stationary  # covariance function (increasing roughness (IR)) cov.m = make_cov_m(cov.f = covf_nonst_matern, grid=grid,  cov.f.params=c(3/2, 1/2, 2)) X_IR  <-  make_sample(mean.v = mu, cov.m = cov.m, N = N, dist = \"rnorm\")  # Estimate tau(t): tau_HR  <- tau_fun(X_HR) tau_IR  <- tau_fun(X_IR)  # Plot data and estimated tau() functions par(mfrow=c(2,2)) matplot(x=grid, y=X_HR, type=\"l\", main=\"Homogeneous Roughness\",  ylab=\"X(t)\", xlab=\"\") matplot(x=grid, y=X_IR, type=\"l\", main=\"Increasing Roughness\",   ylab=\"X(t)\", xlab=\"\") plot(x=grid, y=tau_HR,  type=\"l\", main=\"Homogeneous Roughness\",  ylab=\"tau(t)\", xlab=\"\", ylim=range(tau_HR, tau_IR)) plot(x=grid, y=tau_IR,  type=\"l\", main=\"Increasing Roughness\",   ylab=\"tau(t)\", xlab=\"\", ylim=range(tau_HR, tau_IR))  par(mfrow=c(1,1))"}]
